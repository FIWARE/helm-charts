## Default values for lepus.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

# -- option to override the name config in the _helpers.tpl
nameOverride: ""
# -- option to override the fullname config in the _helpers.tpl
fullnameOverride: ""

## configuration for the k8s service to access lepus
service:
  # -- service type
  type: ClusterIP
  # -- port to be used by the service
  port: 3000
  # -- addtional annotations, if required
  annotations: {}

# -- if a lepus specific service account should be used, it can be configured here
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
serviceAccount:
  # -- specifies if the account should be created
  create: false

## deployment specific configuration
deployment:
  # -- initial number of target replications, can be different if autoscaling is enabled
  replicaCount: 1
  # -- number of old replicas to be retained
  revisionHistoryLimit: 3
  ## configuration of the lepus update strategy
  updateStrategy:
    # -- type of the update
    type: RollingUpdate
    # -- new pods will be added gradually
    rollingUpdate:
      # -- number of pods that can be created above the desired amount while updating
      maxSurge: 1
      # -- number of pods that can be unavailable while updating
      maxUnavailable: 0
  ## configuration of the image to be used
  image:
    # -- lepus image name
    # ref: https://hub.docker.com/r/fiware/lepus
    repository: fiware/lepus
    # -- tag of the image to be used
    tag: latest
    # -- specification of the image pull policy
    pullPolicy: IfNotPresent
  # -- additional labels for the deployment, if required
  additionalLabels: {}
  # -- additional annotations for the deployment, if required
  additionalAnnotations: {}
  ## lepus resource requests and limits, we leave the default empty to make that a concious choice by the user.
  ## for the autoscaling to make sense, you should configure this.
  # resources:
    # limits:
      # cpu: 100m
      # memory: 128Mi
    # requests:
      # cpu: 100m
      # memory: 128Mi
  # -- selector template
  # ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}
  # -- tolerations template
  # ref: ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []
  # -- affinity template
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}
  # -- port to request health information at
  # healthPort: 9090
  ## liveness and readiness probes of the lepus broker, they will be evaluated against the version endpoint
  # ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  readinessProbe:
    initialDelaySeconds: 31
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30

## pod autoscaling configuration, use for automatic scaling of the broker pods
autoscaling:
  #  -- should autoscaling be enabled for lepus
  enabled: false
  # -- minimum number of running pods
  minReplicas: 1
  # -- maximum number of running pods
  maxReplicas: 10
  # -- metrics to react on
  metrics: []
  ## List of MetricSpecs to decide whether to scale
  # See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#metricspec-v2beta2-autoscaling
  # scaler targets to hold average cpu around 80%
  #- type: Resource
  #  resource:
  #    name: cpu
  #     target:
  #      type: Utilization
  #      averageUtilization: 80
  ## scaler targets to hold average memory around 80%
  #  - type: Resource
  #    resource:
  #      name: memory
  #      target:
  #        type: Utilization
  #        averageUtilization: 80

## openshift specific route definition. Will not work on plain k8s
route:
  ## -- should the deployment create openshift routes
  enabled: false
  # -- annotations to be added to the route
  annotations: {}
  # -- host to be used
  # host: localhost
  # -- tls configuration for the route
  tls: {}
  # termination: edge

## ingress configuration
ingress:
  # -- should there be an ingress to connect lepus with the public internet
  enabled: false
  # -- annotations to be added to the ingress
  annotations: {}
    # kubernetes.io/ingress.class: "ambassador"
    ## example annotations, allowing cert-manager to automatically create tls-certs and forcing everything to use ssl.
    # kubernetes.io/tls-acme: "true"
    # ingress.kubernetes.io/ssl-redirect: "true"
  # -- all hosts to be provided
  hosts: []
    ## provide a hosts and the paths that should be available
    # - host: localhost
      # paths:
      # - /
  # -- configure the ingress' tls
  tls: []
    # - secretName: lepus-tls
      # hosts:
        # - lepus.fiware.org

# -- port that the lepus container uses
port: 3000
# -- host where lepus is available at
host: http://localhost
## Regex for for debug output
debug: adapter:*

userContext: 
  # for the fixed JSON-LD @context to be supplied
  url: https://fiware.github.io/tutorials.Step-by-Step/tutorials-context.jsonld
coreContext:
  #  or the fixed core NGSI-LD @context to be supplied 
  url: https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.9.jsonld
lepus:
  # host alias for Lepus
  alias: lepus
  # maximum length of time to forward the NGSI-LD notification
  timeout: 1000
  #  for the location of Lepus itself
  url: https://adapter:3000
  # whether to use multiple cores
  multiCore: true
orion:
  # maximum length of time to access the NGSI-v2 Orion Context Broker URL in milliseconds
  timeout: 1000
  # NGSI-v2 Orion Context Broker URL
  url: http://orion:1026'
notification:
  # Notification URL
  url: http://adapter:3000/notify

# -- a list of additional env vars to be set, check the lepus docu for all available options
additonalEnvVars: []