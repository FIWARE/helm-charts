apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "iota-json.fullname" . }}
  labels:
    {{- include "iota-json.labels" . | nindent 4 }}
data:
  config.js: |-
    let config = {};


    {{- if .Values.mqtt -}}
    /**
     * Configuration for the MQTT binding.
     */
    config.mqtt = {
        /**
         * Host where the MQTT Broker is located.
         */
        host: '{{ .Values.mqtt.broker.host }}',

        /**
         * Port where the MQTT Broker is listening
         */
        port: {{ .Values.mqtt.broker.port }},

        /**
         * protocol to use for connecting with the MQTT broker
         * (`mqtt`, `mqtts`, `tcp`, `tls`, `ws`, `wss`)
         */
        protocol: '{{ .Values.mqtt.broker.protocol }}',

        /**
         * Set to `false` if using a self-signed certificate.
         * Beware that you are exposing yourself to man in the middle attacks
         */
        rejectUnauthorized: {{ .Values.mqtt.certs.rejectUnauthorized }},

        /**
         * QoS Level: at most once (0), at least once (1), exactly once (2). (default is 2).
         */
        qos: {{ .Values.mqtt.qos }},

        /**
         * Retain flag. (default is false).
         */
        retain: {{ .Values.mqtt.retain }},

        /**
         * Number of MQTT connection error retries (default is 5).
         */
        retries: {{ .Values.mqtt.retryNumber }},

        /**
         * Time between MQTT connection retries (default is 5 seconds).
         */
        retryTime: {{ .Values.mqtt.retryTime }},

        /**
         * Time to keep connection open between client and MQTT broker (default is 0 seconds)
         */
        keepalive: {{ .Values.mqtt.keepAlive }},

        /**
         * Whether to use slashes at the beginning of topic when sending or not
         */
        avoidLeadingSlash: {{ .Values.mqtt.avoidLeadingSlash }}
    };
    {{- end }}

    {{- if .Values.amqp -}}
    config.amqp = {
        host: '{{ .Values.amqp.host }}',
        port: {{ .Values.amqp.port }},
        {{- if .Values.amqp.auth -}}
        username: '.Values.amqp.auth.username',
        password: '.Values.amqp.auth.password',
        {{- end }}
        exchange: '.Values.amqp.exchange',
        queue: '.Values.amqp.queue',
        options: { durable: {{ .Values.amqp.durable }} }
    };
    {{- end }}

    /**
     * Configuration for the HTTP transport binding.
     */
    config.http = {
        /**
         * South Port where the Ultralight transport binding for HTTP will be listening for device requests.
         */
        port: {{ .Values.deployment.httpSouthPort }},
        /**
         * HTTP Timeout for the http command endpoint (in milliseconds).
         */
        timeout: {{ .Values.http.timeout }}
        /**
         * Path to your private key for HTTPS binding
         */
        // key: <path_to_private_key>
        /**
         * Path to your certificate for HTTPS binding
         */
        // cert: <path_to_cert>
    };

    config.iota = {
        /**
         * Configures the log level. Appropriate values are: FATAL, ERROR, INFO, WARN and DEBUG.
         */
        logLevel: '{{ .Values.iota.logLevel }}',

        /**
         * When this flag is active, the IoTAgent will add the TimeInstant attribute to every entity created, as well
         * as a TimeInstant metadata to each attribute, with the current timestamp.
         */
        timestamp: {{ .Values.iota.timestamp }},

        /**
         * Context Broker configuration. Defines the connection information to the instance of the Context Broker where
         * the IoT Agent will send the device data.
         */
        contextBroker: {
            /**
             * Host where the Context Broker is located.
             */
            host: '{{ .Values.iota.contextBroker.host }}',

            /**
             * Port where the Context Broker is listening.
             */
            port: '{{ .Values.iota.contextBroker.port }}'
        },

        /**
         * Configuration of the North Port of the IoT Agent.
         */
        server: {
            /**
             * Port where the IoT Agent will be listening for NGSI and Provisioning requests.
             */
            port: {{ .Values.deployment.httpNorthPort }}
        },

        /**
         * Configuration for secured access to instances of the Context Broker secured with a PEP Proxy.
         * For the authentication mechanism to work, the authentication attribute in the configuration has to be fully
         * configured, and the authentication.enabled subattribute should have the value `true`.
         *
         * The Username and password should be considered as sensitive data and should not be stored in plaintext.
         * Either encrypt the config and decrypt when initializing the instance or use environment variables secured by
         * docker secrets.
         */
        {{- if  .Values.iota.authentication -}}
        authentication: {
          enabled: true,
        /**
         * Type of the Identity Manager which is used when authenticating the IoT Agent.
         * Either 'oauth2' or 'keystone'
         */
        type: '{{ .Values.iota.authentication.identityManager.type }}',
        /**
         * Name of the additional header passed to retrieve the identity of the IoT Agent
         */
        header: '{{ .Values.iota.authentication.headerName }}',
        /**
         * Hostname of the Identity Manager.
         */
        host: '{{ .Values.iota.authentication.identityManager.host }}',
        /**
         * Port of the Identity Manager.
         */
        port: '{{ .Values.iota.authentication.identityManager.port }}',
        /**
         * URL of the Identity Manager - a combination of the above
         */
        url: '{{ .Values.iota.authentication.identityManager.host }}:{{ .Values.iota.authentication.identityManager.port }}',

        {{- if eq .Values.iota.authentication.identityManager.type "oauth2" -}}
        /**
         * OAUTH2 ONLY: URL path for retrieving the token
         */
        tokenPath: '{{ .Values.iota.authentication.identityManager.oauth2.tokenPath }}',
        /**
         * OAUTH2 ONLY: Flag to indicate whether or not the token needs to be periodically refreshed.
         */
        permanentToken: {{ .Values.iota.authentication.identityManager.oauth2.permanentToken }}
        {{- end }}
        },
        {{- end }}

        /**
         * Configuration for the IoT Manager. If the IoT Agent is part of a configuration composed of multiple IoTAgents
         * coordinated by an IoT Manager, this section defines the information that will be used to connect with that
         * manager.
         */
        {{- if .Values.iotManager -}}
        iotManager: {
        /**
         * Host where the IoT Manager is located.
         */
        host: '{{ .Values.iotManager.host }}',

        /**
         * Port where the IoT Manager is listening.
         */
        port: {{ .Values.iotManager.port }},

        /**
         * Path where the IoT Manager accepts subscriptions.
         */
        path: '{{ .Values.iotManager.path }}',

        /**
         * Protocol code identifying this IoT Agent.
         */
        protocol: '{{ .Values.iotManager.protocolCode }}',

        /**
         * Textual description of this IoT Agent.
         */
        description: 'MQTT Ultralight 2.0 IoT Agent (Node.js version)'
        },

        /**
         * Default resource of the IoT Agent. This value must be different for every IoT Agent connecting to the IoT
         * Manager.
         */
        {{- if .Values.iotManager.defaultResource -}}
        defaultResource: '{{ .Values.iotManager.defaultResource }}',
        {{- else -}}
        defaultResource: '/iot/{{ randAlphaNum 10 }}',
        {{- end }}
        {{- end }}
        /**
         * Defines the configuration for the Device Registry, where all the information about devices and configuration
         * groups will be stored. There are currently just two types of registries allowed:
         *
         * - 'memory': transient memory-based repository for testing purposes. All the information in the repository is
         *             wiped out when the process is restarted.
         *
         * - 'mongodb': persistent MongoDB storage repository. All the details for the MongoDB configuration will be read
         *             from the 'mongoDb' configuration property.
         */
        deviceRegistry: {
            type: '{{ .Values.deviceRegistry.type}}'
        },

        /**
         * Mongo DB configuration section. This section will only be used if the deviceRegistry property has the type
         * 'mongodb'.
         */
        {{- if eq .Values.deviceRegistry.type "mongodb" -}}
        mongodb: {
            /**
             * Host where MongoDB is located. If the MongoDB used is a replicaSet, this property will contain a
             * comma-separated list of the instance names or IPs.
             */
            host: '{{ .Values.deviceRegistry.mongoDb.host }}',

            /**
             * Port where MongoDB is listening. In the case of a replicaSet, all the instances are supposed to be listening
             * in the same port.
             */
            port: '{{ .Values.deviceRegistry.mongoDb.port }}',

            /**
             * Name of the Mongo database that will be created to store IoT Agent data.
             */
            db: '{{ .Values.deviceRegistry.mongoDb.dbName }}'{{- if .Values.deviceRegistry.mongoDb.replicaSet -}},

            /**
             * Name of the set in case the Mongo database is configured as a Replica Set. Optional otherwise.
             */
            replicaSet: '{{ .Values.deviceRegistry.mongoDb.replicaSet }}'
            {{- end }}
        },
        {{- end }}
        /**
         *  Types array for static configuration of services. Check documentation in the IoT Agent Library for Node.js for
         *  further details:
         *
         *      https://github.com/telefonicaid/iotagent-node-lib#type-configuration
         */
        types: {},

        /**
         * Default service, for IoT Agent installations that won't require preregistration.
         */
        service: '{{ .Values.iota.service }}',

        /**
         * Default subservice, for IoT Agent installations that won't require preregistration.
         */
        subservice: '{{ .Values.iota.subservice }}',

        /**
         * URL Where the IoT Agent Will listen for incoming updateContext and queryContext requests (for commands and
         * passive attributes). This URL will be sent in the Context Registration requests.
         */
        providerUrl: '{{ .Values.iota.providerUrl }}',

        /**
         * Default maximum expire date for device registrations.
         */
        deviceRegistrationDuration: '{{ .Values.iota.deviceRegistrationDuration }}',

        /**
         * Default type, for IoT Agent installations that won't require preregistration.
         */
        defaultType: '{{ .Values.iota.defaultType }}',

        /**
         * flag indicating whether the incoming measures to the IoTAgent should be processed as per the "attributes" field.
         */
        explicitAttrs: {{ .Values.iota.explicitAttributes }}
    };

    /**
     * flag indicating whether the incoming notifications to the IoTAgent should be processed using the bidirectionality
     * plugin from the latest versions of the library or the UL-specific configuration retrieval mechanism.
     */
    config.configRetrieval = {{ .Values.iota.configRetrieval }};

    /**
     * Default API Key, to use with device that have been provisioned without a Configuration Group.
     */
    config.defaultKey = '{{ .Values.iota.defaultKey }}';

    /**
     * Default transport protocol when no transport is provisioned through the Device Provisioning API.
     */
    config.defaultTransport = '{{ .Values.iota.defaultTransport }}';

    module.exports = config;
